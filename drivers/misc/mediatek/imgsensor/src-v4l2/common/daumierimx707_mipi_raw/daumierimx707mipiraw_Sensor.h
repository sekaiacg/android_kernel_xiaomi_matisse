/* SPDX-License-Identifier: GPL-2.0 */
/*
 * Copyright (c) 2019 MediaTek Inc.
 */

/*****************************************************************************
 *
 * Filename:
 * ---------
 *     DAUMIERIMX707mipi_Sensor.h
 *
 * Project:
 * --------
 *     ALPS
 *
 * Description:
 * ------------
 *     CMOS sensor header file
 *
 ****************************************************************************/
#ifndef _DAUMIERIMX707MIPI_SENSOR_H
#define _DAUMIERIMX707MIPI_SENSOR_H

static kal_uint16 daumierimx707_init_setting[] = {
	0x0136, 0x18,
	0x0137, 0x00,
	0x33F0, 0x04,
	0x33F1, 0x05,
	0x0111, 0x03,
	0x3A3E, 0x01,
	0x9DEE, 0xCA,
	0x9E37, 0xCA,
	0x9DFC, 0xCC,
	0x9DFD, 0xCA,
	0x9E45, 0xCC,
	0x9E46, 0xCA,
	0x9E04, 0xC9,
	0x9E4D, 0xC9,
	0x9D78, 0x51,
	0x9D7A, 0xCA,
	0x9D7C, 0x51,
	0x9D7F, 0x51,
	0x9D81, 0xCA,
	0x9D83, 0x51,
	0xB161, 0x06,
	0xB162, 0x06,
	0xB163, 0x06,
	0xB164, 0x06,
	0xB165, 0x06,
	0xB166, 0x06,
	0xB167, 0x06,
	0xB168, 0x06,
	0xB169, 0x09,
	0xB16A, 0x09,
	0xB16B, 0x09,
	0xB16C, 0x09,
	0xB16D, 0x09,
	0xB16E, 0x09,
	0xB16F, 0x09,
	0xB170, 0x09,
	0xC2F4, 0x32,
	0xC305, 0x32,
	0xB478, 0x08,
	0xB30E, 0x00,
	0xB332, 0x00,
	0xA561, 0xF4,
	0xA58C, 0xF4,
	0x9BE5, 0x53,
	0x9BE4, 0x00,
	0x9BED, 0x3C,
	0x9BEC, 0x00,
	0xB800, 0x10,
	0xB801, 0x0C,
	0xB802, 0x09,
	0xB804, 0x09,
	0xB806, 0x09,
	0xB807, 0x09,
	0xB80C, 0x1C,
	0xB80D, 0x10,
	0xB80E, 0x0A,
	0xB810, 0x0A,
	0xB812, 0x0A,
	0xB813, 0x0A,
	0xB819, 0x16,
	0xB81A, 0x0C,
	0xB81C, 0x0C,
	0xB81E, 0x0C,
	0xB81F, 0x0C,
	0xB901, 0xB4,
	0xB900, 0x00,
	0xB923, 0xF3,
	0xB922, 0x00,
	0xB945, 0xE6,
	0xB944, 0x00,
	0xB967, 0xB4,
	0xB966, 0x00,
	0xB905, 0xE1,
	0xB904, 0x00,
	0xB927, 0xE3,
	0xB926, 0x00,
	0xB949, 0xEB,
	0xB948, 0x00,
	0xB96B, 0xEB,
	0xB96A, 0x00,
	0xB90B, 0x76,
	0xB90A, 0x00,
	0xB92D, 0xB0,
	0xB92C, 0x00,
	0xB94F, 0xEA,
	0xB94E, 0x00,
	0xB971, 0xEB,
	0xB970, 0x00,
	0xB98B, 0xEE,
	0xB98A, 0x00,
	0xB99B, 0xD9,
	0xB99A, 0x00,
	0xB907, 0x8C,
	0xB906, 0x00,
	0xB929, 0xC6,
	0xB928, 0x00,
	0xB94B, 0x06,
	0xB94A, 0x01,
	0xB96D, 0x04,
	0xB96C, 0x01,
	0xB989, 0x09,
	0xB988, 0x01,
	0xB999, 0xEF,
	0xB998, 0x00,
	0xB913, 0x49,
	0xB912, 0x00,
	0xB935, 0x66,
	0xB934, 0x00,
	0xB957, 0x97,
	0xB956, 0x00,
	0xB979, 0xA0,
	0xB978, 0x00,
	0xB98F, 0x9E,
	0xB98E, 0x00,
	0xB99F, 0xAA,
	0xB99E, 0x00,
	0xB90F, 0x82,
	0xB90E, 0x00,
	0xB931, 0x98,
	0xB930, 0x00,
	0xB953, 0xBC,
	0xB952, 0x00,
	0xB975, 0xCF,
	0xB974, 0x00,
	0xB98D, 0xD3,
	0xB98C, 0x00,
	0xB99D, 0xBE,
	0xB99C, 0x00,
	0xB9A9, 0x00,
	0xB9A8, 0x00,
	0xB9AD, 0x52,
	0xB9AC, 0x00,
	0xB91B, 0x7D,
	0xB91A, 0x00,
	0xB93D, 0xB9,
	0xB93C, 0x00,
	0xB95F, 0xF2,
	0xB95E, 0x00,
	0xB981, 0xFA,
	0xB980, 0x00,
	0xB995, 0xFD,
	0xB994, 0x00,
	0xB9A5, 0xEA,
	0xB9A4, 0x00,
	0xB91F, 0x84,
	0xB91E, 0x00,
	0xB941, 0x97,
	0xB940, 0x00,
	0xB963, 0xCE,
	0xB962, 0x00,
	0xB985, 0xC8,
	0xB984, 0x00,
	0xB997, 0xBE,
	0xB996, 0x00,
	0xB9A7, 0xBA,
	0xB9A6, 0x00,
	0xB9B1, 0xF6,
	0xB9B0, 0x00,
	0xB9D3, 0x05,
	0xB9D2, 0x01,
	0xB9F5, 0xBF,
	0xB9F4, 0x00,
	0xBA17, 0x82,
	0xBA16, 0x01,
	0xB9B5, 0x82,
	0xB9B4, 0x00,
	0xB9D7, 0x84,
	0xB9D6, 0x00,
	0xB9F9, 0xF8,
	0xB9F8, 0x00,
	0xBA1B, 0x7E,
	0xBA1A, 0x01,
	0xB9BB, 0xAD,
	0xB9BA, 0x00,
	0xB9DD, 0xB6,
	0xB9DC, 0x00,
	0xB9FF, 0xFA,
	0xB9FE, 0x00,
	0xBA21, 0xE6,
	0xBA20, 0x00,
	0xBA3B, 0x18,
	0xBA3A, 0x01,
	0xBA4B, 0x7D,
	0xBA4A, 0x01,
	0xB9B7, 0x6F,
	0xB9B6, 0x00,
	0xB9D9, 0x06,
	0xB9D8, 0x01,
	0xB9FB, 0x64,
	0xB9FA, 0x01,
	0xBA1D, 0x5B,
	0xBA1C, 0x01,
	0xBA39, 0x22,
	0xBA38, 0x01,
	0xBA49, 0x4C,
	0xBA48, 0x01,
	0xB9C3, 0x54,
	0xB9C2, 0x00,
	0xB9E5, 0x8C,
	0xB9E4, 0x00,
	0xBA07, 0xBA,
	0xBA06, 0x00,
	0xBA29, 0xA4,
	0xBA28, 0x00,
	0xBA3F, 0xBC,
	0xBA3E, 0x00,
	0xBA4F, 0xCC,
	0xBA4E, 0x00,
	0xB9BF, 0xC5,
	0xB9BE, 0x00,
	0xB9E1, 0x78,
	0xB9E0, 0x00,
	0xBA03, 0xD0,
	0xBA02, 0x00,
	0xBA25, 0x83,
	0xBA24, 0x00,
	0xBA3D, 0x76,
	0xBA3C, 0x00,
	0xBA4D, 0x83,
	0xBA4C, 0x00,
	0xBA59, 0x9A,
	0xBA58, 0x00,
	0xBA5D, 0xF4,
	0xBA5C, 0x00,
	0xB9CB, 0x22,
	0xB9CA, 0x00,
	0xB9ED, 0xBC,
	0xB9EC, 0x00,
	0xBA0F, 0x48,
	0xBA0E, 0x01,
	0xBA31, 0x53,
	0xBA30, 0x01,
	0xBA45, 0x4C,
	0xBA44, 0x01,
	0xBA55, 0x97,
	0xBA54, 0x01,
	0xB9CF, 0x98,
	0xB9CE, 0x00,
	0xB9F1, 0x82,
	0xB9F0, 0x00,
	0xBA13, 0xB9,
	0xBA12, 0x00,
	0xBA35, 0xED,
	0xBA34, 0x00,
	0xBA47, 0xFA,
	0xBA46, 0x00,
	0xBA57, 0xEB,
	0xBA56, 0x00,
	0xBB6D, 0x00,
	0xBB6B, 0x0F,
	0xBB71, 0x00,
	0xBB6F, 0x0F,
	0xBBBE, 0x0F,
	0xBB75, 0x00,
	0xB85C, 0x09,
	0xB868, 0x09,
	0xB871, 0x09,
	0xB877, 0x09,
	0xBD90, 0xB9,
	0xBD91, 0x96,
	0xBD92, 0x96,
	0xBD93, 0xB9,
	0xBD95, 0xB9,
	0xBD97, 0x6E,
	0xBD99, 0x6E,
	0xBD9D, 0xBE,
	0xBD9F, 0x69,
	0xBDA1, 0xB4,
	0xBDA2, 0xAF,
	0xBDA3, 0xAF,
	0xBDA4, 0xC3,
	0xBDA6, 0xC3,
	0xBDA8, 0x69,
	0xBDAA, 0x5A,
	0xBDAE, 0xC3,
	0xBDB0, 0x5A,
	0xB385, 0x0F,
	0xB396, 0x0F,
	0xC52F, 0x0C,
	0xC540, 0x0C,
	0xC551, 0x0C,
	0xC562, 0x0C,
	0x9AE1, 0x08,
	0x9AE0, 0x0D,
	0xB383, 0x0F,
	0xB394, 0x0F,
	0xC52D, 0x0B,
	0xC53E, 0x0B,
	0xC54F, 0x0B,
	0xC560, 0x0B,
	0x9ABD, 0x65,
	0x9ABC, 0x06,
	0xB368, 0x01,
	0xB37A, 0x01,
	0xB38D, 0x0F,
	0xB39E, 0x0F,
	0x9A13, 0x69,
	0x9A12, 0x01,
	0x9A5B, 0x69,
	0x9A5A, 0x01,
	0x9A9B, 0x69,
	0x9A9A, 0x01,
	0x9ABF, 0x69,
	0x9ABE, 0x01,
	0x9AFF, 0x69,
	0x9AFE, 0x01,
	0x9B23, 0x69,
	0x9B22, 0x01,
	0x9B73, 0x69,
	0x9B72, 0x01,
	0x9BB3, 0x69,
	0x9BB2, 0x01,
	0x9BF3, 0x69,
	0x9BF2, 0x01,
	0x9C33, 0x69,
	0x9C32, 0x01,
	0x9A27, 0xDF,
	0x9A26, 0x00,
	0x9A6F, 0xDF,
	0x9A6E, 0x00,
	0x9AAF, 0xDF,
	0x9AAE, 0x00,
	0x9AD3, 0xDF,
	0x9AD2, 0x00,
	0x9B13, 0xDF,
	0x9B12, 0x00,
	0x9B37, 0xDF,
	0x9B36, 0x00,
	0x9B87, 0xDF,
	0x9B86, 0x00,
	0x9BC7, 0xDF,
	0x9BC6, 0x00,
	0x9C47, 0xDF,
	0x9C46, 0x00,
	0x9C07, 0xDF,
	0x9C06, 0x00,
	0x9A35, 0xC9,
	0x9A34, 0x06,
	0x9A7D, 0x2B,
	0x9A7C, 0x09,
	0x9B21, 0x72,
	0x9B20, 0x06,
	0x9B45, 0x2B,
	0x9B44, 0x09,
	0x9B95, 0x40,
	0x9B94, 0x09,
	0x9BD5, 0x3F,
	0x9BD4, 0x09,
	0x9C15, 0x60,
	0x9C14, 0x0D,
	0x9C55, 0x31,
	0x9C54, 0x0D,
	0xA6DB, 0xE1,
	0xA6DA, 0x00,
	0xA6DD, 0xFD,
	0xA6DC, 0x01,
	0xA6DF, 0xB6,
	0xA6DE, 0x00,
	0xA6E1, 0xDC,
	0xA6E0, 0x01,
	0xA6EB, 0xC7,
	0xA6EA, 0x00,
	0xA6ED, 0xC6,
	0xA6EC, 0x01,
	0xA6EF, 0xA2,
	0xA6EE, 0x00,
	0xA6F1, 0xAC,
	0xA6F0, 0x01,
	0xA6F3, 0xCF,
	0xA6F2, 0x00,
	0xA6F5, 0xCE,
	0xA6F4, 0x01,
	0xA6F7, 0x90,
	0xA6F6, 0x00,
	0xA6F9, 0x99,
	0xA6F8, 0x01,
	0xA6FB, 0x17,
	0xA6FA, 0x02,
	0xA6FD, 0x16,
	0xA6FC, 0x03,
	0xA6FF, 0xEA,
	0xA6FE, 0x01,
	0xA701, 0xF4,
	0xA700, 0x02,
	0xA703, 0xD7,
	0xA702, 0x00,
	0xA705, 0xD6,
	0xA704, 0x01,
	0xA707, 0x95,
	0xA706, 0x00,
	0xA709, 0x9E,
	0xA708, 0x01,
	0xA70B, 0xD7,
	0xA70A, 0x00,
	0xA70D, 0xD6,
	0xA70C, 0x01,
	0xA70F, 0xA2,
	0xA70E, 0x00,
	0xA711, 0xAC,
	0xA710, 0x01,
	0xA713, 0xFD,
	0xA712, 0x00,
	0xA715, 0x06,
	0xA714, 0x02,
	0xA717, 0x99,
	0xA716, 0x00,
	0xA719, 0xAD,
	0xA718, 0x01,
	0xA71B, 0x05,
	0xA71A, 0x01,
	0xA71D, 0x0E,
	0xA71C, 0x02,
	0xA71F, 0x98,
	0xA71E, 0x00,
	0xA721, 0xAC,
	0xA720, 0x01,
	0xA723, 0x05,
	0xA722, 0x01,
	0xA725, 0x5A,
	0xA724, 0x02,
	0xA727, 0x5E,
	0xA726, 0x01,
	0xA729, 0x03,
	0xA728, 0x04,
	0xA72B, 0xEB,
	0xA72A, 0x00,
	0xA72D, 0x40,
	0xA72C, 0x02,
	0xA72F, 0x5E,
	0xA72E, 0x01,
	0xA731, 0x03,
	0xA730, 0x04,
	0x3A29, 0xB4,
	0x3A28, 0x00,
	0xBA5B, 0x00,
	0xBA5A, 0x00,
	0xBA5F, 0x9B,
	0xBA5E, 0x00,
	0xBB15, 0x1F,
	0xBB26, 0x1F,
	0xBB37, 0x1F,
	0xBB48, 0x1F,
	0xBB55, 0x1F,
	0xBB5D, 0x1F,
	0xBB7E, 0x00,
	0xBB8F, 0x00,
	0xBBA0, 0x00,
	0xBBAD, 0x00,
	0xBBB5, 0x0F,
	0xBB19, 0x1F,
	0xBB2A, 0x00,
	0xBB3B, 0x00,
	0xBB4C, 0x00,
	0xBB57, 0x05,
	0xBB5F, 0x1F,
	0xBB82, 0x00,
	0xBB93, 0x02,
	0xBBA4, 0x03,
	0xBBAF, 0x08,
	0xBBB7, 0x0F,
	0xBB12, 0x06,
	0xBB23, 0x07,
	0xBB34, 0x1F,
	0xBB45, 0x1F,
	0xBB6A, 0x00,
	0xBB7B, 0x00,
	0xBB8C, 0x00,
	0xBB9D, 0x0F,
	0xBB13, 0x1F,
	0xBB24, 0x1F,
	0xBB35, 0x1F,
	0xBB46, 0x1F,
	0xBB54, 0x1F,
	0xBB5C, 0x1F,
	0xBB7C, 0x00,
	0xBB8D, 0x00,
	0xBB9E, 0x00,
	0xBBAC, 0x00,
	0xBBB4, 0x0F,
	0xBB17, 0x1F,
	0xBB28, 0x1F,
	0xBB39, 0x1F,
	0xBB4A, 0x1F,
	0xBB56, 0x1F,
	0xBB5E, 0x1F,
	0xBB80, 0x00,
	0xBB91, 0x00,
	0xBBA2, 0x00,
	0xBBAE, 0x00,
	0xBBB6, 0x0F,
	0xBB1D, 0x1F,
	0xBB2E, 0x1F,
	0xBB3F, 0x1F,
	0xBB50, 0x1F,
	0xBB5A, 0x1F,
	0xBB62, 0x1F,
	0xBB86, 0x00,
	0xBB97, 0x00,
	0xBBA8, 0x00,
	0xBBB2, 0x0F,
	0xBBBA, 0x00,
	0xBB1F, 0x1F,
	0xBB30, 0x1F,
	0xBB41, 0x1F,
	0xBB52, 0x1F,
	0xBB5B, 0x1F,
	0xBB63, 0x1F,
	0xBB77, 0x00,
	0xBB88, 0x00,
	0xBB99, 0x00,
	0xBBAA, 0x00,
	0xBBB3, 0x0F,
	0xBBBB, 0x0F,
	0xBB10, 0x1F,
	0xBB21, 0x1F,
	0xBB32, 0x1F,
	0xBB43, 0x1F,
	0xBB68, 0x0F,
	0xBB79, 0x00,
	0xBB8A, 0x00,
	0xBB9B, 0x00,
	0xBB64, 0x00,
	0xBB66, 0x00,
	0xBBBC, 0x0F,
	0xB9AB, 0x00,
	0xB9AA, 0x00,
	0xB9AF, 0x24,
	0xB9AE, 0x00,
	0xBB65, 0x00,
	0xBB67, 0x00,
	0xBBBD, 0x00,
	0xBBBF, 0x00,
	0xB842, 0x03,
	0xB84E, 0x03,
	0xBA93, 0x10,
	0xBA95, 0x14,
	0xBAAD, 0x14,
	0xBAAC, 0x15,
	0xBAAF, 0x15,
	0xBAAE, 0x14,
	0xBAB6, 0x06,
	0xBAB7, 0x04,
	0xBAB2, 0x0E,
	0xBAB3, 0x0F,
	0xBAEB, 0x20,
	0xBAED, 0x07,
	0xBB05, 0x14,
	0xBB04, 0x20,
	0xBB07, 0x13,
	0xBB06, 0x2E,
	0xBB0E, 0x13,
	0xBB0F, 0x04,
	0xBB0A, 0x25,
	0xBB0B, 0x0C,
	0x9D62, 0x04,
	0x9D63, 0x05,
	0x9D64, 0x82,
	0x9D65, 0x83,
	0x9AC7, 0xCC,
	0x9AC6, 0x00,
	0x9ACD, 0xC2,
	0x9ACC, 0x00,
	0x9AD1, 0xFB,
	0x9AD0, 0x03,
	0x9AD5, 0x2E,
	0x9AD4, 0x01,
	0x9AD9, 0xC2,
	0x9AD8, 0x00,
	0x9AF1, 0x0B,
	0x9AF0, 0x01,
	0x9AF5, 0xC2,
	0x9AF4, 0x00,
	0x9AFB, 0xFB,
	0x9AFA, 0x03,
	0xA73B, 0x4C,
	0xA73A, 0x02,
	0xA73D, 0x54,
	0xA73C, 0x03,
	0xA747, 0xF0,
	0xA746, 0x00,
	0xA749, 0x02,
	0xA748, 0x02,
	0xBA65, 0x1E,
	0xBA76, 0x1D,
	0xBA87, 0x1C,
	0xBA98, 0x18,
	0xBAA5, 0x16,
	0xBABD, 0x02,
	0xBACE, 0x05,
	0xBADF, 0x05,
	0xBAF0, 0x17,
	0xBAFD, 0x14,
	0x90C3, 0x60,
	0xB369, 0x01,
	0xB37B, 0x01,
	0xB384, 0x0F,
	0xB386, 0x0F,
	0xB38E, 0x0F,
	0xB39F, 0x0F,
	0xB395, 0x0F,
	0xB397, 0x0F,
	0xB803, 0x0C,
	0xB908, 0x01,
	0xB909, 0x06,
	0xB90C, 0x00,
	0xB90D, 0xEA,
	0xB91C, 0x00,
	0xB91D, 0xF2,
	0xB92A, 0x01,
	0xB92B, 0x04,
	0xB92E, 0x00,
	0xB92F, 0xEB,
	0xB93E, 0x00,
	0xB93F, 0xFA,
	0xB94C, 0x01,
	0xB94D, 0x09,
	0xB950, 0x00,
	0xB951, 0xEE,
	0xB960, 0x00,
	0xB961, 0xFD,
	0xB96E, 0x00,
	0xB96F, 0xEF,
	0xB972, 0x00,
	0xB973, 0xD9,
	0xB982, 0x00,
	0xB983, 0xEA,
	0xB9B8, 0x01,
	0xB9B9, 0x64,
	0xB9BC, 0x00,
	0xB9BD, 0xFA,
	0xB9CC, 0x01,
	0xB9CD, 0x48,
	0xB9DA, 0x01,
	0xB9DB, 0x5B,
	0xB9DE, 0x00,
	0xB9DF, 0xE6,
	0xB9EE, 0x01,
	0xB9EF, 0x53,
	0xB9FC, 0x01,
	0xB9FD, 0x22,
	0xBA00, 0x01,
	0xBA01, 0x18,
	0xBA10, 0x01,
	0xBA11, 0x4C,
	0xBA1E, 0x01,
	0xBA1F, 0x4C,
	0xBA22, 0x01,
	0xBA23, 0x7D,
	0xBA32, 0x01,
	0xBA33, 0x97,
	0xBA66, 0x1C,
	0xBA77, 0x18,
	0xBA88, 0x16,
	0xBA99, 0x14,
	0xBABE, 0x05,
	0xBACF, 0x17,
	0xBAE0, 0x14,
	0xBAF1, 0x14,
	0xBB14, 0x1F,
	0xBB16, 0x1F,
	0xBB1E, 0x1F,
	0xBB25, 0x1F,
	0xBB27, 0x1F,
	0xBB2F, 0x1F,
	0xBB36, 0x1F,
	0xBB38, 0x1F,
	0xBB40, 0x1F,
	0xBB47, 0x1F,
	0xBB49, 0x1F,
	0xBB51, 0x1F,
	0xBB6C, 0x00,
	0xBB6E, 0x00,
	0xBB76, 0x00,
	0xBB7D, 0x00,
	0xBB7F, 0x00,
	0xBB87, 0x00,
	0xBB8E, 0x00,
	0xBB90, 0x00,
	0xBB98, 0x0F,
	0xBB9F, 0x0F,
	0xBBA1, 0x0F,
	0xBBA9, 0x00,
	0xC52E, 0x0B,
	0xC530, 0x0C,
	0xC53F, 0x0B,
	0xC541, 0x0C,
	0xB44D, 0x01,
	0x3A3E, 0x00,
	0x3078, 0x01,
	0x3079, 0x2B,
	0x3089, 0x01,
	0x3032, 0x04,
	0x32DC, 0x00,
	0x33D3, 0x04,
	0x33D4, 0x04,
	0x33D5, 0x00,
	0x33D6, 0x00,
	0x33D7, 0x40,
	0x33D8, 0x03,
	0x33DA, 0x06,
	0x33DB, 0x00,
	0x33DC, 0x00,
	0x33DD, 0x80,
	0x33DE, 0x02,
	0x33E0, 0x08,
	0x33E1, 0x00,
	0x33E2, 0x01,
	0x33E3, 0x00,
	0x33E4, 0x01,
	0x33E6, 0x0D,
	0x33E7, 0xFE,
	0x33E8, 0x03,
	0x33E9, 0xFF,
	0x33EA, 0x00,
	0x33EC, 0x1D,
	0x33ED, 0xFC,
	0x33EE, 0x13,
	0x33EF, 0xFD,
	0x3814, 0x00,
	0x3815, 0x20,
	0x3816, 0x01,
	0x3817, 0x00,
	0x3818, 0x10,
	0x3819, 0x03,
	0x381A, 0x03,
	0x381B, 0x03,
	0x381C, 0x0F,
	0x381D, 0x0F,
	0x381E, 0x0F,
	0x381F, 0x0F,
	0x3820, 0x0F,
	0x439E, 0x00,
	0x439F, 0x01,
	0x4A30, 0x04,
	0x541E, 0x01,
	0x543C, 0x00,
	0x54AE, 0x01,
	0x582A, 0x00,
	0x9002, 0x0A,
	0x9003, 0x0A,
	0x9004, 0x14,
	0x9015, 0x00,
	0x9016, 0x00,
	0x9017, 0x03,
	0x901E, 0x01,
	0x9200, 0xFF,
	0x9201, 0xFF,
	0x9202, 0xFF,
	0x9203, 0xFF,
	0x9204, 0xFF,
	0x9205, 0xFF,
	0x9206, 0xFF,
	0x9207, 0xFF,
	0x9208, 0xFF,
	0x9209, 0xFF,
	0x920A, 0xFF,
	0x920B, 0xFF,
	0x920C, 0xFF,
	0x920D, 0xFF,
	0x920E, 0xFF,
	0x920F, 0xFF,
	0x9210, 0xFF,
	0x9211, 0xFF,
	0x9212, 0xFF,
	0x9213, 0xFF,
	0x9214, 0xFF,
	0x9215, 0xFF,
	0x9216, 0xFF,
	0x9217, 0xFF,
	0x9218, 0xFF,
	0x9219, 0xFF,
	0x921A, 0xFF,
	0x921B, 0xFF,
	0x921C, 0xFF,
	0x921D, 0xFF,
	0x921E, 0xFF,
	0x921F, 0xFF,
	0x9220, 0xFF,
	0x9221, 0xFF,
	0x9222, 0xFF,
	0x9223, 0xFF,
	0x9224, 0xFF,
	0x9225, 0xFF,
	0x9226, 0xFF,
	0x9227, 0xFF,
	0x9228, 0xF3,
	0x9229, 0x04,
	0x922A, 0xF3,
	0x922B, 0x05,
	0x922C, 0xF3,
	0x922D, 0x22,
	0x922E, 0xF3,
	0x922F, 0x23,
	0x9230, 0xF3,
	0x9231, 0x3E,
	0x9232, 0x97,
	0x9233, 0x5A,
	0x9234, 0x97,
	0x9235, 0x5B,
	0x9236, 0x97,
	0x9237, 0x59,
	0x9238, 0x99,
	0x9239, 0x55,
	0x923A, 0x99,
	0x923B, 0x56,
	0x923C, 0x99,
	0x923D, 0x57,
	0x923E, 0x99,
	0x923F, 0x58,
	0x9240, 0x99,
	0x9241, 0x59,
	0x9242, 0x43,
	0x9243, 0x0A,
	0x9250, 0x24,
	0x9251, 0x05,
	0x9252, 0x23,
	0x9253, 0xDF,
	0x9254, 0x24,
	0x9255, 0x72,
	0xA11A, 0x80,
	0xA2E4, 0x02,
	0xA2E5, 0x00,
	0xA2E6, 0x02,
	0xA2E7, 0x00,
	0xB02C, 0x01,
	0xB02E, 0x0F,
	0xB02F, 0xFF,
	0xB030, 0x08,
	0xB031, 0xFF,
	0xB036, 0x07,
	0xB037, 0xFF,
	0xB678, 0x2B,
	0xB679, 0xA0,
	0xB67A, 0x29,
	0xB67B, 0xD0,
	0xB67C, 0x22,
	0xB67D, 0xB0,
	0xB67E, 0x53,
	0xB67F, 0xE0,
	0xB680, 0x28,
	0xB681, 0xB0,
	0xB682, 0x37,
	0xB683, 0xB0,
	0xB684, 0x7C,
	0xB685, 0xE0,
	0xB686, 0x29,
	0xB687, 0x30,
	0xB688, 0x23,
	0xB689, 0xB0,
	0xB68A, 0x53,
	0xB68B, 0xE0,
	0xB68C, 0x26,
	0xB68D, 0xB0,
	0xB68E, 0x55,
	0xB68F, 0x20,
	0xB690, 0x27,
	0xB691, 0x30,
	0xB692, 0x55,
	0xB693, 0x20,
	0xB698, 0x2B,
	0xB699, 0xF0,
	0xB69A, 0x71,
	0xB69B, 0xC0,
	0xB69C, 0x2A,
	0xB69D, 0x50,
	0xB69E, 0x6E,
	0xB69F, 0xD0,
	0xCE90, 0x00,
	0xCE91, 0x00,
};

static kal_uint16 daumierimx707_preview_setting[] = {
	0x0112, 0x0A,
	0x0113, 0x0A,
	0x0114, 0x02,
	0x0342, 0x34,
	0x0343, 0xE0,
	0x3102, 0x00,
	0x0340, 0x1C,
	0x0341, 0xFC,
	0x0344, 0x00,
	0x0345, 0x00,
	0x0346, 0x00,
	0x0347, 0x00,
	0x0348, 0x1F,
	0x0349, 0xFF,
	0x034A, 0x17,
	0x034B, 0xFF,
	0x0220, 0x62,
	0x0221, 0x11,
	0x0900, 0x01,
	0x0901, 0x22,
	0x0902, 0x08,
	0x3004, 0x03,
	0x30D0, 0x0A,
	0x30D8, 0x04,
	0x32DE, 0x00,
	0x350C, 0x00,
	0x350D, 0x00,
	0x3821, 0x01,
	0x3828, 0x00,
	0x3829, 0x01,
	0x382A, 0x01,
	0x3920, 0x01,
	0x39A8, 0x00,
	0xB02D, 0x01,
	0x0408, 0x00,
	0x0409, 0x00,
	0x040A, 0x00,
	0x040B, 0x00,
	0x040C, 0x10,
	0x040D, 0x00,
	0x040E, 0x0C,
	0x040F, 0x00,
	0x034C, 0x10,
	0x034D, 0x00,
	0x034E, 0x0C,
	0x034F, 0x00,
	0x0301, 0x05,
	0x0303, 0x02,
	0x0305, 0x04,
	0x0306, 0x01,
	0x0307, 0x3A,
	0x030B, 0x01,
	0x030D, 0x04,
	0x030E, 0x01,
	0x030F, 0x8F,
	0x3289, 0x00,
	0x32D5, 0x00,
	0x32D6, 0x00,
	0x0202, 0x1C,
	0x0203, 0x9C,
	0x0224, 0x01,
	0x0225, 0xF4,
	0x3116, 0x01,
	0x3117, 0xF4,
	0x0204, 0x00,
	0x0205, 0x00,
	0x0216, 0x00,
	0x0217, 0x00,
	0x0218, 0x01,
	0x0219, 0x00,
	0x020E, 0x01,
	0x020F, 0x00,
	0x3118, 0x00,
	0x3119, 0x00,
	0x311A, 0x01,
	0x311B, 0x00,
	0x0860, 0x00,
	0x0861, 0x00,
	0x0862, 0x00,
	0x0863, 0x00,
	0x309B, 0x01,
	0x0E00, 0x00,
	0x0E01, 0x00,
	0x0E02, 0x00,
	0x0E03, 0x00,
	0x0E10, 0x00,
	0x0E11, 0x00,
	0x0E12, 0x00,
	0x0E13, 0x00,
	0x0E14, 0x00,
	0x0E15, 0x00,
	0x0E16, 0x00,
	0x0E17, 0x00,
	0x0E18, 0x00,
	0x0E19, 0x00,
	0x0E1A, 0x00,
	0x0E1B, 0x00,
	0x0E1C, 0x00,
	0x0E1D, 0x00,
	0x0E1F, 0x00,
	0x0E20, 0x00,
	0x0E21, 0x00,
	0x0E22, 0x00,
	0x0E23, 0x00,
	0x0E24, 0x00,
	0x0E25, 0x00,
	0x0E26, 0x00,
	0x0E28, 0x00,
	0x0E29, 0x00,
	0x0E2A, 0x00,
	0x0E2B, 0x00,
	0x0E2C, 0x00,
	0x0E2D, 0x00,
	0x0E2E, 0x00,
	0x0E2F, 0x00,
	0x0E30, 0x00,
	0x0E31, 0x00,
	0x0E32, 0x00,
	0x0E33, 0x00,
	0x0E34, 0x00,
	0x0E35, 0x00,
	0x0E37, 0x00,
	0x0E38, 0x00,
	0x0E39, 0x00,
	0x0E3A, 0x00,
	0x0E3B, 0x00,
	0x0E3C, 0x00,
	0x0E3D, 0x00,
	0x0E3E, 0x00,
	0x0E40, 0x00,
	0x0E41, 0x00,
	0x0E42, 0x00,
	0x0E43, 0x00,
	0x0E44, 0x00,
	0x0E45, 0x00,
	0x0E46, 0x00,
	0x0E47, 0x00,
	0x0E48, 0x00,
	0x0E49, 0x00,
	0x0E4A, 0x00,
	0x0E4B, 0x00,
	0x0E4C, 0x00,
	0x0E4D, 0x00,
	0x0E4F, 0x00,
	0x0E50, 0x00,
	0x0E51, 0x00,
	0x0E52, 0x00,
	0x0E53, 0x00,
	0x0E54, 0x00,
	0x0E55, 0x00,
	0x0E56, 0x00,
	0x3342, 0x00,
	0x3343, 0x00,
	0x334B, 0x00,
	0x0808, 0x02,
	0x084E, 0x00,
	0x084F, 0x17, //T3-pre
	0x0850, 0x00,
	0x0851, 0x11,
	0x0852, 0x00,
	0x0853, 0x23,
	0x0854, 0x00,
	0x0855, 0x29,
	0x0858, 0x00,
	0x0859, 0x1D, //T3-post
};

//same as preview
static kal_uint16 daumierimx707_capture_setting[] = {
};

static kal_uint16 daumierimx707_normal_video_setting[] = {
	0x0112, 0x0A,
	0x0113, 0x0A,
	0x0114, 0x02,
	0x0342, 0x34,
	0x0343, 0xE0,
	0x3102, 0x00,
	0x0340, 0x21,
	0x0341, 0x3C,
	0x0344, 0x00,
	0x0345, 0x00,
	0x0346, 0x03,
	0x0347, 0x00,
	0x0348, 0x1F,
	0x0349, 0xFF,
	0x034A, 0x14,
	0x034B, 0xFF,
	0x0220, 0x62,
	0x0221, 0x11,
	0x0900, 0x01,
	0x0901, 0x22,
	0x0902, 0x08,
	0x3004, 0x03,
	0x30D0, 0x0A,
	0x30D8, 0x04,
	0x32DE, 0x00,
	0x350C, 0x00,
	0x350D, 0x00,
	0x3821, 0x01,
	0x3828, 0x00,
	0x3829, 0x01,
	0x382A, 0x01,
	0x3920, 0x01,
	0x39A8, 0x00,
	0xB02D, 0x01,
	0x0408, 0x00,
	0x0409, 0x00,
	0x040A, 0x00,
	0x040B, 0x00,
	0x040C, 0x10,
	0x040D, 0x00,
	0x040E, 0x09,
	0x040F, 0x00,
	0x034C, 0x10,
	0x034D, 0x00,
	0x034E, 0x09,
	0x034F, 0x00,
	0x0301, 0x05,
	0x0303, 0x02,
	0x0305, 0x04,
	0x0306, 0x01,
	0x0307, 0x68,
	0x030B, 0x01,
	0x030D, 0x04,
	0x030E, 0x01,
	0x030F, 0x8F,
	0x3289, 0x00,
	0x32D5, 0x00,
	0x32D6, 0x00,
	0x0202, 0x20,
	0x0203, 0xDC,
	0x0224, 0x01,
	0x0225, 0xF4,
	0x3116, 0x01,
	0x3117, 0xF4,
	0x0204, 0x00,
	0x0205, 0x00,
	0x0216, 0x00,
	0x0217, 0x00,
	0x0218, 0x01,
	0x0219, 0x00,
	0x020E, 0x01,
	0x020F, 0x00,
	0x3118, 0x00,
	0x3119, 0x00,
	0x311A, 0x01,
	0x311B, 0x00,
	0x0860, 0x00,
	0x0861, 0x00,
	0x0862, 0x00,
	0x0863, 0x00,
	0x309B, 0x01,
	0x0E00, 0x00,
	0x0E01, 0x00,
	0x0E02, 0x00,
	0x0E03, 0x00,
	0x0E10, 0x00,
	0x0E11, 0x00,
	0x0E12, 0x00,
	0x0E13, 0x00,
	0x0E14, 0x00,
	0x0E15, 0x00,
	0x0E16, 0x00,
	0x0E17, 0x00,
	0x0E18, 0x00,
	0x0E19, 0x00,
	0x0E1A, 0x00,
	0x0E1B, 0x00,
	0x0E1C, 0x00,
	0x0E1D, 0x00,
	0x0E1F, 0x00,
	0x0E20, 0x00,
	0x0E21, 0x00,
	0x0E22, 0x00,
	0x0E23, 0x00,
	0x0E24, 0x00,
	0x0E25, 0x00,
	0x0E26, 0x00,
	0x0E28, 0x00,
	0x0E29, 0x00,
	0x0E2A, 0x00,
	0x0E2B, 0x00,
	0x0E2C, 0x00,
	0x0E2D, 0x00,
	0x0E2E, 0x00,
	0x0E2F, 0x00,
	0x0E30, 0x00,
	0x0E31, 0x00,
	0x0E32, 0x00,
	0x0E33, 0x00,
	0x0E34, 0x00,
	0x0E35, 0x00,
	0x0E37, 0x00,
	0x0E38, 0x00,
	0x0E39, 0x00,
	0x0E3A, 0x00,
	0x0E3B, 0x00,
	0x0E3C, 0x00,
	0x0E3D, 0x00,
	0x0E3E, 0x00,
	0x0E40, 0x00,
	0x0E41, 0x00,
	0x0E42, 0x00,
	0x0E43, 0x00,
	0x0E44, 0x00,
	0x0E45, 0x00,
	0x0E46, 0x00,
	0x0E47, 0x00,
	0x0E48, 0x00,
	0x0E49, 0x00,
	0x0E4A, 0x00,
	0x0E4B, 0x00,
	0x0E4C, 0x00,
	0x0E4D, 0x00,
	0x0E4F, 0x00,
	0x0E50, 0x00,
	0x0E51, 0x00,
	0x0E52, 0x00,
	0x0E53, 0x00,
	0x0E54, 0x00,
	0x0E55, 0x00,
	0x0E56, 0x00,
	0x3342, 0x00,
	0x3343, 0x00,
	0x334B, 0x00,
	0x0808, 0x02,
	0x084E, 0x00,
	0x084F, 0x17, //T3-pre
	0x0850, 0x00,
	0x0851, 0x11,
	0x0852, 0x00,
	0x0853, 0x23,
	0x0854, 0x00,
	0x0855, 0x29,
	0x0858, 0x00,
	0x0859, 0x1D, //T3-post
};

static kal_uint16 daumierimx707_hs_video_setting[] = {
	0x0112, 0x0A,
	0x0113, 0x0A,
	0x0114, 0x02,
	0x0342, 0x24,
	0x0343, 0xD0,
	0x3102, 0x00,
	0x0340, 0x05,
	0x0341, 0xF8,
	0x0344, 0x00,
	0x0345, 0x00,
	0x0346, 0x03,
	0x0347, 0x90,
	0x0348, 0x1F,
	0x0349, 0xFF,
	0x034A, 0x14,
	0x034B, 0x6F,
	0x0220, 0x62,
	0x0221, 0x11,
	0x0900, 0x01,
	0x0901, 0x44,
	0x0902, 0x08,
	0x3004, 0x03,
	0x30D0, 0x0A,
	0x30D8, 0x04,
	0x32DE, 0x00,
	0x350C, 0x00,
	0x350D, 0x00,
	0x3821, 0x00,
	0x3828, 0x00,
	0x3829, 0x01,
	0x382A, 0x01,
	0x3920, 0x01,
	0x39A8, 0x00,
	0xB02D, 0x01,
	0x0408, 0x00,
	0x0409, 0x40,
	0x040A, 0x00,
	0x040B, 0x00,
	0x040C, 0x07,
	0x040D, 0x80,
	0x040E, 0x04,
	0x040F, 0x38,
	0x034C, 0x07,
	0x034D, 0x80,
	0x034E, 0x04,
	0x034F, 0x38,
	0x0301, 0x05,
	0x0303, 0x02,
	0x0305, 0x04,
	0x0306, 0x01,
	0x0307, 0x68,
	0x030B, 0x01,
	0x030D, 0x04,
	0x030E, 0x01,
	0x030F, 0x8F,
	0x3289, 0x00,
	0x32D5, 0x00,
	0x32D6, 0x00,
	0x0202, 0x05,
	0x0203, 0x98,
	0x0224, 0x01,
	0x0225, 0xF4,
	0x3116, 0x01,
	0x3117, 0xF4,
	0x0204, 0x00,
	0x0205, 0x00,
	0x0216, 0x00,
	0x0217, 0x00,
	0x0218, 0x01,
	0x0219, 0x00,
	0x020E, 0x01,
	0x020F, 0x00,
	0x3118, 0x00,
	0x3119, 0x00,
	0x311A, 0x01,
	0x311B, 0x00,
	0x0860, 0x00,
	0x0861, 0x00,
	0x0862, 0x00,
	0x0863, 0x00,
	0x309B, 0x01,
	0x0E00, 0x00,
	0x0E01, 0x00,
	0x0E02, 0x00,
	0x0E03, 0x00,
	0x0E10, 0x00,
	0x0E11, 0x00,
	0x0E12, 0x00,
	0x0E13, 0x00,
	0x0E14, 0x00,
	0x0E15, 0x00,
	0x0E16, 0x00,
	0x0E17, 0x00,
	0x0E18, 0x00,
	0x0E19, 0x00,
	0x0E1A, 0x00,
	0x0E1B, 0x00,
	0x0E1C, 0x00,
	0x0E1D, 0x00,
	0x0E1F, 0x00,
	0x0E20, 0x00,
	0x0E21, 0x00,
	0x0E22, 0x00,
	0x0E23, 0x00,
	0x0E24, 0x00,
	0x0E25, 0x00,
	0x0E26, 0x00,
	0x0E28, 0x00,
	0x0E29, 0x00,
	0x0E2A, 0x00,
	0x0E2B, 0x00,
	0x0E2C, 0x00,
	0x0E2D, 0x00,
	0x0E2E, 0x00,
	0x0E2F, 0x00,
	0x0E30, 0x00,
	0x0E31, 0x00,
	0x0E32, 0x00,
	0x0E33, 0x00,
	0x0E34, 0x00,
	0x0E35, 0x00,
	0x0E37, 0x00,
	0x0E38, 0x00,
	0x0E39, 0x00,
	0x0E3A, 0x00,
	0x0E3B, 0x00,
	0x0E3C, 0x00,
	0x0E3D, 0x00,
	0x0E3E, 0x00,
	0x0E40, 0x00,
	0x0E41, 0x00,
	0x0E42, 0x00,
	0x0E43, 0x00,
	0x0E44, 0x00,
	0x0E45, 0x00,
	0x0E46, 0x00,
	0x0E47, 0x00,
	0x0E48, 0x00,
	0x0E49, 0x00,
	0x0E4A, 0x00,
	0x0E4B, 0x00,
	0x0E4C, 0x00,
	0x0E4D, 0x00,
	0x0E4F, 0x00,
	0x0E50, 0x00,
	0x0E51, 0x00,
	0x0E52, 0x00,
	0x0E53, 0x00,
	0x0E54, 0x00,
	0x0E55, 0x00,
	0x0E56, 0x00,
	0x3342, 0x00,
	0x3343, 0x00,
	0x334B, 0x00,
	0x0808, 0x02,
	0x084E, 0x00,
	0x084F, 0x17, //T3-pre
	0x0850, 0x00,
	0x0851, 0x11,
	0x0852, 0x00,
	0x0853, 0x23,
	0x0854, 0x00,
	0x0855, 0x29,
	0x0858, 0x00,
	0x0859, 0x1D, //T3-post
};

//same as preview
static kal_uint16 daumierimx707_slim_video_setting[] = {
};

//same as preview
static kal_uint16 daumierimx707_custom1_setting[] = {
};

static kal_uint16 daumierimx707_custom2_setting[] = {
	0x0112, 0x0A,
	0x0113, 0x0A,
	0x0114, 0x02,
	0x0342, 0x24,
	0x0343, 0xD0,
	0x3102, 0x00,
	0x0340, 0x0B,
	0x0341, 0xF0,
	0x0344, 0x00,
	0x0345, 0x00,
	0x0346, 0x03,
	0x0347, 0x90,
	0x0348, 0x1F,
	0x0349, 0xFF,
	0x034A, 0x14,
	0x034B, 0x6F,
	0x0220, 0x62,
	0x0221, 0x11,
	0x0900, 0x01,
	0x0901, 0x44,
	0x0902, 0x08,
	0x3004, 0x03,
	0x30D0, 0x0A,
	0x30D8, 0x04,
	0x32DE, 0x00,
	0x350C, 0x00,
	0x350D, 0x00,
	0x3821, 0x00,
	0x3828, 0x00,
	0x3829, 0x01,
	0x382A, 0x01,
	0x3920, 0x01,
	0x39A8, 0x00,
	0xB02D, 0x01,
	0x0408, 0x00,
	0x0409, 0x40,
	0x040A, 0x00,
	0x040B, 0x00,
	0x040C, 0x07,
	0x040D, 0x80,
	0x040E, 0x04,
	0x040F, 0x38,
	0x034C, 0x07,
	0x034D, 0x80,
	0x034E, 0x04,
	0x034F, 0x38,
	0x0301, 0x05,
	0x0303, 0x02,
	0x0305, 0x04,
	0x0306, 0x01,
	0x0307, 0x68,
	0x030B, 0x01,
	0x030D, 0x04,
	0x030E, 0x01,
	0x030F, 0x8F,
	0x3289, 0x00,
	0x32D5, 0x00,
	0x32D6, 0x00,
	0x0202, 0x0B,
	0x0203, 0x90,
	0x0224, 0x01,
	0x0225, 0xF4,
	0x3116, 0x01,
	0x3117, 0xF4,
	0x0204, 0x00,
	0x0205, 0x00,
	0x0216, 0x00,
	0x0217, 0x00,
	0x0218, 0x01,
	0x0219, 0x00,
	0x020E, 0x01,
	0x020F, 0x00,
	0x3118, 0x00,
	0x3119, 0x00,
	0x311A, 0x01,
	0x311B, 0x00,
	0x0860, 0x00,
	0x0861, 0x00,
	0x0862, 0x00,
	0x0863, 0x00,
	0x309B, 0x01,
	0x0E00, 0x00,
	0x0E01, 0x00,
	0x0E02, 0x00,
	0x0E03, 0x00,
	0x0E10, 0x00,
	0x0E11, 0x00,
	0x0E12, 0x00,
	0x0E13, 0x00,
	0x0E14, 0x00,
	0x0E15, 0x00,
	0x0E16, 0x00,
	0x0E17, 0x00,
	0x0E18, 0x00,
	0x0E19, 0x00,
	0x0E1A, 0x00,
	0x0E1B, 0x00,
	0x0E1C, 0x00,
	0x0E1D, 0x00,
	0x0E1F, 0x00,
	0x0E20, 0x00,
	0x0E21, 0x00,
	0x0E22, 0x00,
	0x0E23, 0x00,
	0x0E24, 0x00,
	0x0E25, 0x00,
	0x0E26, 0x00,
	0x0E28, 0x00,
	0x0E29, 0x00,
	0x0E2A, 0x00,
	0x0E2B, 0x00,
	0x0E2C, 0x00,
	0x0E2D, 0x00,
	0x0E2E, 0x00,
	0x0E2F, 0x00,
	0x0E30, 0x00,
	0x0E31, 0x00,
	0x0E32, 0x00,
	0x0E33, 0x00,
	0x0E34, 0x00,
	0x0E35, 0x00,
	0x0E37, 0x00,
	0x0E38, 0x00,
	0x0E39, 0x00,
	0x0E3A, 0x00,
	0x0E3B, 0x00,
	0x0E3C, 0x00,
	0x0E3D, 0x00,
	0x0E3E, 0x00,
	0x0E40, 0x00,
	0x0E41, 0x00,
	0x0E42, 0x00,
	0x0E43, 0x00,
	0x0E44, 0x00,
	0x0E45, 0x00,
	0x0E46, 0x00,
	0x0E47, 0x00,
	0x0E48, 0x00,
	0x0E49, 0x00,
	0x0E4A, 0x00,
	0x0E4B, 0x00,
	0x0E4C, 0x00,
	0x0E4D, 0x00,
	0x0E4F, 0x00,
	0x0E50, 0x00,
	0x0E51, 0x00,
	0x0E52, 0x00,
	0x0E53, 0x00,
	0x0E54, 0x00,
	0x0E55, 0x00,
	0x0E56, 0x00,
	0x3342, 0x00,
	0x3343, 0x00,
	0x334B, 0x00,
	0x0808, 0x02,
	0x084E, 0x00,
	0x084F, 0x17, //T3-pre
	0x0850, 0x00,
	0x0851, 0x11,
	0x0852, 0x00,
	0x0853, 0x23,
	0x0854, 0x00,
	0x0855, 0x29,
	0x0858, 0x00,
	0x0859, 0x1D, //T3-post
};

static kal_uint16 daumierimx707_custom3_setting[] = {
	0x0112, 0x0A,
	0x0113, 0x0A,
	0x0114, 0x02,
	0x0342, 0x34,
	0x0343, 0xE0,
	0x3102, 0x00,
	0x0340, 0x10,
	0x0341, 0x9C,
	0x0344, 0x00,
	0x0345, 0x00,
	0x0346, 0x03,
	0x0347, 0x00,
	0x0348, 0x1F,
	0x0349, 0xFF,
	0x034A, 0x14,
	0x034B, 0xFF,
	0x0220, 0x62,
	0x0221, 0x11,
	0x0900, 0x01,
	0x0901, 0x22,
	0x0902, 0x08,
	0x3004, 0x03,
	0x30D0, 0x0A,
	0x30D8, 0x04,
	0x32DE, 0x00,
	0x350C, 0x00,
	0x350D, 0x00,
	0x3821, 0x01,
	0x3828, 0x00,
	0x3829, 0x01,
	0x382A, 0x01,
	0x3920, 0x01,
	0x39A8, 0x00,
	0xB02D, 0x01,
	0x0408, 0x00,
	0x0409, 0x00,
	0x040A, 0x00,
	0x040B, 0x00,
	0x040C, 0x10,
	0x040D, 0x00,
	0x040E, 0x09,
	0x040F, 0x00,
	0x034C, 0x10,
	0x034D, 0x00,
	0x034E, 0x09,
	0x034F, 0x00,
	0x0301, 0x05,
	0x0303, 0x02,
	0x0305, 0x04,
	0x0306, 0x01,
	0x0307, 0x68,
	0x030B, 0x01,
	0x030D, 0x04,
	0x030E, 0x01,
	0x030F, 0x8F,
	0x3289, 0x00,
	0x32D5, 0x00,
	0x32D6, 0x00,
	0x0224, 0x01,
	0x0225, 0xF4,
	0x3116, 0x01,
	0x3117, 0xF4,
	0x0216, 0x00,
	0x0217, 0x00,
	0x0218, 0x01,
	0x0219, 0x00,
	0x020E, 0x01,
	0x020F, 0x00,
	0x3118, 0x00,
	0x3119, 0x00,
	0x311A, 0x01,
	0x311B, 0x00,
	0x0860, 0x00,
	0x0861, 0x00,
	0x0862, 0x00,
	0x0863, 0x00,
	0x309B, 0x01,
	0x0E00, 0x00,
	0x0E01, 0x00,
	0x0E02, 0x00,
	0x0E03, 0x00,
	0x0E10, 0x00,
	0x0E11, 0x00,
	0x0E12, 0x00,
	0x0E13, 0x00,
	0x0E14, 0x00,
	0x0E15, 0x00,
	0x0E16, 0x00,
	0x0E17, 0x00,
	0x0E18, 0x00,
	0x0E19, 0x00,
	0x0E1A, 0x00,
	0x0E1B, 0x00,
	0x0E1C, 0x00,
	0x0E1D, 0x00,
	0x0E1F, 0x00,
	0x0E20, 0x00,
	0x0E21, 0x00,
	0x0E22, 0x00,
	0x0E23, 0x00,
	0x0E24, 0x00,
	0x0E25, 0x00,
	0x0E26, 0x00,
	0x0E28, 0x00,
	0x0E29, 0x00,
	0x0E2A, 0x00,
	0x0E2B, 0x00,
	0x0E2C, 0x00,
	0x0E2D, 0x00,
	0x0E2E, 0x00,
	0x0E2F, 0x00,
	0x0E30, 0x00,
	0x0E31, 0x00,
	0x0E32, 0x00,
	0x0E33, 0x00,
	0x0E34, 0x00,
	0x0E35, 0x00,
	0x0E37, 0x00,
	0x0E38, 0x00,
	0x0E39, 0x00,
	0x0E3A, 0x00,
	0x0E3B, 0x00,
	0x0E3C, 0x00,
	0x0E3D, 0x00,
	0x0E3E, 0x00,
	0x0E40, 0x00,
	0x0E41, 0x00,
	0x0E42, 0x00,
	0x0E43, 0x00,
	0x0E44, 0x00,
	0x0E45, 0x00,
	0x0E46, 0x00,
	0x0E47, 0x00,
	0x0E48, 0x00,
	0x0E49, 0x00,
	0x0E4A, 0x00,
	0x0E4B, 0x00,
	0x0E4C, 0x00,
	0x0E4D, 0x00,
	0x0E4F, 0x00,
	0x0E50, 0x00,
	0x0E51, 0x00,
	0x0E52, 0x00,
	0x0E53, 0x00,
	0x0E54, 0x00,
	0x0E55, 0x00,
	0x0E56, 0x00,
	0x3342, 0x00,
	0x3343, 0x00,
	0x334B, 0x00,
	0x0808, 0x02,
	0x084E, 0x00,
	0x084F, 0x17, //T3-pre
	0x0850, 0x00,
	0x0851, 0x11,
	0x0852, 0x00,
	0x0853, 0x23,
	0x0854, 0x00,
	0x0855, 0x29,
	0x0858, 0x00,
	0x0859, 0x1D, //T3-post
};

static kal_uint16 daumierimx707_custom4_setting[] = {
	0x0112, 0x0A,
	0x0113, 0x0A,
	0x0114, 0x02,
	0x0342, 0x4A,
	0x0343, 0x40,
	0x3102, 0x00,
	0x0340, 0x18,
	0x0341, 0xDC,
	0x0344, 0x00,
	0x0345, 0x00,
	0x0346, 0x00,
	0x0347, 0x00,
	0x0348, 0x1F,
	0x0349, 0xFF,
	0x034A, 0x17,
	0x034B, 0xFF,
	0x0220, 0x62,
	0x0221, 0x11,
	0x0900, 0x01,
	0x0901, 0x11,
	0x0902, 0x0A,
	0x3004, 0x03,
	0x30D0, 0x0A,
	0x30D8, 0x04,
	0x32DE, 0x00,
	0x350C, 0x00,
	0x350D, 0x00,
	0x3821, 0x00,
	0x3828, 0x00,
	0x3829, 0x01,
	0x382A, 0x01,
	0x3920, 0x01,
	0x39A8, 0x00,
	0xB02D, 0x01,
	0x0408, 0x00,
	0x0409, 0x00,
	0x040A, 0x00,
	0x040B, 0x00,
	0x040C, 0x20,
	0x040D, 0x00,
	0x040E, 0x18,
	0x040F, 0x00,
	0x034C, 0x20,
	0x034D, 0x00,
	0x034E, 0x18,
	0x034F, 0x00,
	0x0301, 0x05,
	0x0303, 0x02,
	0x0305, 0x04,
	0x0306, 0x01,
	0x0307, 0x68,
	0x030B, 0x01,
	0x030D, 0x04,
	0x030E, 0x01,
	0x030F, 0x8F,
	0x3289, 0x00,
	0x32D5, 0x01,
	0x32D6, 0x01,
	0x0202, 0x18,
	0x0203, 0x7C,
	0x0224, 0x01,
	0x0225, 0xF4,
	0x3116, 0x01,
	0x3117, 0xF4,
	0x0204, 0x00,
	0x0205, 0x00,
	0x0216, 0x00,
	0x0217, 0x00,
	0x0218, 0x01,
	0x0219, 0x00,
	0x020E, 0x01,
	0x020F, 0x00,
	0x3118, 0x00,
	0x3119, 0x00,
	0x311A, 0x01,
	0x311B, 0x00,
	0x0860, 0x00,
	0x0861, 0x00,
	0x0862, 0x00,
	0x0863, 0x00,
	0x309B, 0x00,
	0x0E00, 0x00,
	0x0E01, 0x00,
	0x0E02, 0x00,
	0x0E03, 0x00,
	0x0E10, 0x00,
	0x0E11, 0x00,
	0x0E12, 0x00,
	0x0E13, 0x00,
	0x0E14, 0x00,
	0x0E15, 0x00,
	0x0E16, 0x00,
	0x0E17, 0x00,
	0x0E18, 0x00,
	0x0E19, 0x00,
	0x0E1A, 0x00,
	0x0E1B, 0x00,
	0x0E1C, 0x00,
	0x0E1D, 0x00,
	0x0E1F, 0x00,
	0x0E20, 0x00,
	0x0E21, 0x00,
	0x0E22, 0x00,
	0x0E23, 0x00,
	0x0E24, 0x00,
	0x0E25, 0x00,
	0x0E26, 0x00,
	0x0E28, 0x00,
	0x0E29, 0x00,
	0x0E2A, 0x00,
	0x0E2B, 0x00,
	0x0E2C, 0x00,
	0x0E2D, 0x00,
	0x0E2E, 0x00,
	0x0E2F, 0x00,
	0x0E30, 0x00,
	0x0E31, 0x00,
	0x0E32, 0x00,
	0x0E33, 0x00,
	0x0E34, 0x00,
	0x0E35, 0x00,
	0x0E37, 0x00,
	0x0E38, 0x00,
	0x0E39, 0x00,
	0x0E3A, 0x00,
	0x0E3B, 0x00,
	0x0E3C, 0x00,
	0x0E3D, 0x00,
	0x0E3E, 0x00,
	0x0E40, 0x00,
	0x0E41, 0x00,
	0x0E42, 0x00,
	0x0E43, 0x00,
	0x0E44, 0x00,
	0x0E45, 0x00,
	0x0E46, 0x00,
	0x0E47, 0x00,
	0x0E48, 0x00,
	0x0E49, 0x00,
	0x0E4A, 0x00,
	0x0E4B, 0x00,
	0x0E4C, 0x00,
	0x0E4D, 0x00,
	0x0E4F, 0x00,
	0x0E50, 0x00,
	0x0E51, 0x00,
	0x0E52, 0x00,
	0x0E53, 0x00,
	0x0E54, 0x00,
	0x0E55, 0x00,
	0x0E56, 0x00,
	0x3342, 0x00,
	0x3343, 0x00,
	0x334B, 0x00,
	0x0808, 0x02,
	0x084E, 0x00,
	0x084F, 0x17, //T3-pre
	0x0850, 0x00,
	0x0851, 0x11,
	0x0852, 0x00,
	0x0853, 0x23,
	0x0854, 0x00,
	0x0855, 0x29,
	0x0858, 0x00,
	0x0859, 0x1D, //T3-post
};

static kal_uint16 daumierimx707_custom5_setting[] = {
	0x0112, 0x0A,
	0x0113, 0x0A,
	0x0114, 0x02,
	0x0342, 0x4A,
	0x0343, 0x40,
	0x3102, 0x00,
	0x0340, 0x14,
	0x0341, 0xA6,
	0x0344, 0x00,
	0x0345, 0x00,
	0x0346, 0x06,
	0x0347, 0x00,
	0x0348, 0x1F,
	0x0349, 0xFF,
	0x034A, 0x11,
	0x034B, 0xFF,
	0x0220, 0x62,
	0x0221, 0x11,
	0x0900, 0x01,
	0x0901, 0x11,
	0x0902, 0x0A,
	0x3004, 0x03,
	0x30D0, 0x0A,
	0x30D8, 0x04,
	0x32DE, 0x00,
	0x350C, 0x00,
	0x350D, 0x00,
	0x3821, 0x00,
	0x3828, 0x00,
	0x3829, 0x01,
	0x382A, 0x01,
	0x3920, 0x01,
	0x39A8, 0x00,
	0xB02D, 0x01,
	0x0408, 0x08,
	0x0409, 0x00,
	0x040A, 0x00,
	0x040B, 0x00,
	0x040C, 0x10,
	0x040D, 0x00,
	0x040E, 0x0C,
	0x040F, 0x00,
	0x034C, 0x10,
	0x034D, 0x00,
	0x034E, 0x0C,
	0x034F, 0x00,
	0x0301, 0x05,
	0x0303, 0x02,
	0x0305, 0x04,
	0x0306, 0x01,
	0x0307, 0x3A,
	0x030B, 0x01,
	0x030D, 0x04,
	0x030E, 0x01,
	0x030F, 0x8F,
	0x3289, 0x00,
	0x32D5, 0x01,
	0x32D6, 0x01,
	0x0202, 0x14,
	0x0203, 0x46,
	0x0224, 0x01,
	0x0225, 0xF4,
	0x3116, 0x01,
	0x3117, 0xF4,
	0x0204, 0x00,
	0x0205, 0x00,
	0x0216, 0x00,
	0x0217, 0x00,
	0x0218, 0x01,
	0x0219, 0x00,
	0x020E, 0x01,
	0x020F, 0x00,
	0x3118, 0x00,
	0x3119, 0x00,
	0x311A, 0x01,
	0x311B, 0x00,
	0x0860, 0x00,
	0x0861, 0x00,
	0x0862, 0x00,
	0x0863, 0x00,
	0x309B, 0x01,
	0x0E00, 0x00,
	0x0E01, 0x00,
	0x0E02, 0x00,
	0x0E03, 0x00,
	0x0E10, 0x00,
	0x0E11, 0x00,
	0x0E12, 0x00,
	0x0E13, 0x00,
	0x0E14, 0x00,
	0x0E15, 0x00,
	0x0E16, 0x00,
	0x0E17, 0x00,
	0x0E18, 0x00,
	0x0E19, 0x00,
	0x0E1A, 0x00,
	0x0E1B, 0x00,
	0x0E1C, 0x00,
	0x0E1D, 0x00,
	0x0E1F, 0x00,
	0x0E20, 0x00,
	0x0E21, 0x00,
	0x0E22, 0x00,
	0x0E23, 0x00,
	0x0E24, 0x00,
	0x0E25, 0x00,
	0x0E26, 0x00,
	0x0E28, 0x00,
	0x0E29, 0x00,
	0x0E2A, 0x00,
	0x0E2B, 0x00,
	0x0E2C, 0x00,
	0x0E2D, 0x00,
	0x0E2E, 0x00,
	0x0E2F, 0x00,
	0x0E30, 0x00,
	0x0E31, 0x00,
	0x0E32, 0x00,
	0x0E33, 0x00,
	0x0E34, 0x00,
	0x0E35, 0x00,
	0x0E37, 0x00,
	0x0E38, 0x00,
	0x0E39, 0x00,
	0x0E3A, 0x00,
	0x0E3B, 0x00,
	0x0E3C, 0x00,
	0x0E3D, 0x00,
	0x0E3E, 0x00,
	0x0E40, 0x00,
	0x0E41, 0x00,
	0x0E42, 0x00,
	0x0E43, 0x00,
	0x0E44, 0x00,
	0x0E45, 0x00,
	0x0E46, 0x00,
	0x0E47, 0x00,
	0x0E48, 0x00,
	0x0E49, 0x00,
	0x0E4A, 0x00,
	0x0E4B, 0x00,
	0x0E4C, 0x00,
	0x0E4D, 0x00,
	0x0E4F, 0x00,
	0x0E50, 0x00,
	0x0E51, 0x00,
	0x0E52, 0x00,
	0x0E53, 0x00,
	0x0E54, 0x00,
	0x0E55, 0x00,
	0x0E56, 0x00,
	0x3342, 0x00,
	0x3343, 0x00,
	0x334B, 0x00,
	0x0808, 0x02,
	0x084E, 0x00,
	0x084F, 0x17, //T3-pre
	0x0850, 0x00,
	0x0851, 0x11,
	0x0852, 0x00,
	0x0853, 0x23,
	0x0854, 0x00,
	0x0855, 0x29,
	0x0858, 0x00,
	0x0859, 0x1D, //T3-post
};

//same as preview
static kal_uint16 daumierimx707_custom6_setting[] = {
};

static kal_uint16 daumierimx707_custom7_setting[] = {
};

static kal_uint16 daumierimx707_custom8_setting[] = {
	0x0112, 0x0A,
	0x0113, 0x0A,
	0x0114, 0x02,
	0x0342, 0x34,
	0x0343, 0xE0,
	0x3102, 0x00,
	0x0340, 0x21,
	0x0341, 0x3C,
	0x0344, 0x00,
	0x0345, 0x00,
	0x0346, 0x00,
	0x0347, 0x00,
	0x0348, 0x1F,
	0x0349, 0xFF,
	0x034A, 0x17,
	0x034B, 0xFF,
	0x0220, 0x62,
	0x0221, 0x11,
	0x0900, 0x01,
	0x0901, 0x22,
	0x0902, 0x08,
	0x3004, 0x03,
	0x30D0, 0x0A,
	0x30D8, 0x04,
	0x32DE, 0x00,
	0x350C, 0x00,
	0x350D, 0x00,
	0x3821, 0x01,
	0x3828, 0x00,
	0x3829, 0x01,
	0x382A, 0x01,
	0x3920, 0x01,
	0x39A8, 0x00,
	0xB02D, 0x01,
	0x0408, 0x02,
	0x0409, 0x00,
	0x040A, 0x00,
	0x040B, 0x00,
	0x040C, 0x0C,
	0x040D, 0x00,
	0x040E, 0x0C,
	0x040F, 0x00,
	0x034C, 0x0C,
	0x034D, 0x00,
	0x034E, 0x0C,
	0x034F, 0x00,
	0x0301, 0x05,
	0x0303, 0x02,
	0x0305, 0x04,
	0x0306, 0x01,
	0x0307, 0x68,
	0x030B, 0x01,
	0x030D, 0x04,
	0x030E, 0x01,
	0x030F, 0x8F,
	0x3289, 0x00,
	0x32D5, 0x00,
	0x32D6, 0x00,
	0x0202, 0x20,
	0x0203, 0xDC,
	0x0224, 0x01,
	0x0225, 0xF4,
	0x3116, 0x01,
	0x3117, 0xF4,
	0x0204, 0x00,
	0x0205, 0x00,
	0x0216, 0x00,
	0x0217, 0x00,
	0x0218, 0x01,
	0x0219, 0x00,
	0x020E, 0x01,
	0x020F, 0x00,
	0x3118, 0x00,
	0x3119, 0x00,
	0x311A, 0x01,
	0x311B, 0x00,
	0x0860, 0x00,
	0x0861, 0x00,
	0x0862, 0x00,
	0x0863, 0x00,
	0x309B, 0x01,
	0x0E00, 0x00,
	0x0E01, 0x00,
	0x0E02, 0x00,
	0x0E03, 0x00,
	0x0E10, 0x00,
	0x0E11, 0x00,
	0x0E12, 0x00,
	0x0E13, 0x00,
	0x0E14, 0x00,
	0x0E15, 0x00,
	0x0E16, 0x00,
	0x0E17, 0x00,
	0x0E18, 0x00,
	0x0E19, 0x00,
	0x0E1A, 0x00,
	0x0E1B, 0x00,
	0x0E1C, 0x00,
	0x0E1D, 0x00,
	0x0E1F, 0x00,
	0x0E20, 0x00,
	0x0E21, 0x00,
	0x0E22, 0x00,
	0x0E23, 0x00,
	0x0E24, 0x00,
	0x0E25, 0x00,
	0x0E26, 0x00,
	0x0E28, 0x00,
	0x0E29, 0x00,
	0x0E2A, 0x00,
	0x0E2B, 0x00,
	0x0E2C, 0x00,
	0x0E2D, 0x00,
	0x0E2E, 0x00,
	0x0E2F, 0x00,
	0x0E30, 0x00,
	0x0E31, 0x00,
	0x0E32, 0x00,
	0x0E33, 0x00,
	0x0E34, 0x00,
	0x0E35, 0x00,
	0x0E37, 0x00,
	0x0E38, 0x00,
	0x0E39, 0x00,
	0x0E3A, 0x00,
	0x0E3B, 0x00,
	0x0E3C, 0x00,
	0x0E3D, 0x00,
	0x0E3E, 0x00,
	0x0E40, 0x00,
	0x0E41, 0x00,
	0x0E42, 0x00,
	0x0E43, 0x00,
	0x0E44, 0x00,
	0x0E45, 0x00,
	0x0E46, 0x00,
	0x0E47, 0x00,
	0x0E48, 0x00,
	0x0E49, 0x00,
	0x0E4A, 0x00,
	0x0E4B, 0x00,
	0x0E4C, 0x00,
	0x0E4D, 0x00,
	0x0E4F, 0x00,
	0x0E50, 0x00,
	0x0E51, 0x00,
	0x0E52, 0x00,
	0x0E53, 0x00,
	0x0E54, 0x00,
	0x0E55, 0x00,
	0x0E56, 0x00,
	0x3342, 0x00,
	0x3343, 0x00,
	0x334B, 0x00,
	0x0808, 0x02,
	0x084E, 0x00,
	0x084F, 0x17, //T3-pre
	0x0850, 0x00,
	0x0851, 0x11,
	0x0852, 0x00,
	0x0853, 0x23,
	0x0854, 0x00,
	0x0855, 0x29,
	0x0858, 0x00,
	0x0859, 0x1D, //T3-post
};

/* 8k 24fps */
static kal_uint16 daumierimx707_custom9_setting[] = {
	0x0112, 0x0A,
	0x0113, 0x0A,
	0x0114, 0x02,
	0x0342, 0x4A,
	0x0343, 0x40,
	0x3102, 0x00,
	0x0340, 0x1D,
	0x0341, 0x96,
	0x0344, 0x00,
	0x0345, 0x00,
	0x0346, 0x03,
	0x0347, 0x90,
	0x0348, 0x1F,
	0x0349, 0xFF,
	0x034A, 0x14,
	0x034B, 0x6F,
	0x0220, 0x62,
	0x0221, 0x11,
	0x0900, 0x01,
	0x0901, 0x11,
	0x0902, 0x0A,
	0x3004, 0x03,
	0x30D0, 0x0A,
	0x30D8, 0x04,
	0x32DE, 0x00,
	0x350C, 0x00,
	0x350D, 0x00,
	0x3821, 0x00,
	0x3828, 0x00,
	0x3829, 0x01,
	0x382A, 0x01,
	0x3920, 0x01,
	0x39A8, 0x00,
	0xB02D, 0x01,
	0x0408, 0x01,
	0x0409, 0x00,
	0x040A, 0x00,
	0x040B, 0x00,
	0x040C, 0x1E,
	0x040D, 0x00,
	0x040E, 0x10,
	0x040F, 0xE0,
	0x034C, 0x1E,
	0x034D, 0x00,
	0x034E, 0x10,
	0x034F, 0xE0,
	0x0301, 0x05,
	0x0303, 0x02,
	0x0305, 0x04,
	0x0306, 0x01,
	0x0307, 0x68,
	0x030B, 0x01,
	0x030D, 0x04,
	0x030E, 0x01,
	0x030F, 0xDA,
	0x3289, 0x00,
	0x32D5, 0x01,
	0x32D6, 0x01,
	0x0202, 0x1D,
	0x0203, 0x36,
	0x0224, 0x01,
	0x0225, 0xF4,
	0x3116, 0x01,
	0x3117, 0xF4,
	0x0204, 0x00,
	0x0205, 0x00,
	0x0216, 0x00,
	0x0217, 0x00,
	0x0218, 0x01,
	0x0219, 0x00,
	0x020E, 0x01,
	0x020F, 0x00,
	0x3118, 0x00,
	0x3119, 0x00,
	0x311A, 0x01,
	0x311B, 0x00,
	0x0860, 0x00,
	0x0861, 0x00,
	0x0862, 0x00,
	0x0863, 0x00,
	0x309B, 0x01,
	0x0E00, 0x00,
	0x0E01, 0x00,
	0x0E02, 0x00,
	0x0E03, 0x00,
	0x0E10, 0x00,
	0x0E11, 0x00,
	0x0E12, 0x00,
	0x0E13, 0x00,
	0x0E14, 0x00,
	0x0E15, 0x00,
	0x0E16, 0x00,
	0x0E17, 0x00,
	0x0E18, 0x00,
	0x0E19, 0x00,
	0x0E1A, 0x00,
	0x0E1B, 0x00,
	0x0E1C, 0x00,
	0x0E1D, 0x00,
	0x0E1F, 0x00,
	0x0E20, 0x00,
	0x0E21, 0x00,
	0x0E22, 0x00,
	0x0E23, 0x00,
	0x0E24, 0x00,
	0x0E25, 0x00,
	0x0E26, 0x00,
	0x0E28, 0x00,
	0x0E29, 0x00,
	0x0E2A, 0x00,
	0x0E2B, 0x00,
	0x0E2C, 0x00,
	0x0E2D, 0x00,
	0x0E2E, 0x00,
	0x0E2F, 0x00,
	0x0E30, 0x00,
	0x0E31, 0x00,
	0x0E32, 0x00,
	0x0E33, 0x00,
	0x0E34, 0x00,
	0x0E35, 0x00,
	0x0E37, 0x00,
	0x0E38, 0x00,
	0x0E39, 0x00,
	0x0E3A, 0x00,
	0x0E3B, 0x00,
	0x0E3C, 0x00,
	0x0E3D, 0x00,
	0x0E3E, 0x00,
	0x0E40, 0x00,
	0x0E41, 0x00,
	0x0E42, 0x00,
	0x0E43, 0x00,
	0x0E44, 0x00,
	0x0E45, 0x00,
	0x0E46, 0x00,
	0x0E47, 0x00,
	0x0E48, 0x00,
	0x0E49, 0x00,
	0x0E4A, 0x00,
	0x0E4B, 0x00,
	0x0E4C, 0x00,
	0x0E4D, 0x00,
	0x0E4F, 0x00,
	0x0E50, 0x00,
	0x0E51, 0x00,
	0x0E52, 0x00,
	0x0E53, 0x00,
	0x0E54, 0x00,
	0x0E55, 0x00,
	0x0E56, 0x00,
	0x3342, 0x00,
	0x3343, 0x00,
	0x334B, 0x00,
	0x0808, 0x02,
	0x084E, 0x00,
	0x084F, 0x1C, //T3-pre
	0x0850, 0x00,
	0x0851, 0x15,
	0x0852, 0x00,
	0x0853, 0x29,
	0x0854, 0x00,
	0x0855, 0x29,
	0x0858, 0x00,
	0x0859, 0x1F, //T3-post
};

static kal_uint16 daumierimx707_custom10_setting[] = {
	0x0112, 0x0A,
	0x0113, 0x0A,
	0x0114, 0x02,
	0x0342, 0x34,
	0x0343, 0xE0,
	0x3102, 0x00,
	0x0340, 0x10,
	0x0341, 0x9C,
	0x0344, 0x00,
	0x0345, 0x00,
	0x0346, 0x03,
	0x0347, 0x80,
	0x0348, 0x1F,
	0x0349, 0xFF,
	0x034A, 0x14,
	0x034B, 0x7F,
	0x0220, 0x62,
	0x0221, 0x11,
	0x0900, 0x01,
	0x0901, 0x22,
	0x0902, 0x08,
	0x3004, 0x03,
	0x30D0, 0x0A,
	0x30D8, 0x04,
	0x32DE, 0x00,
	0x350C, 0x00,
	0x350D, 0x00,
	0x3821, 0x01,
	0x3828, 0x00,
	0x3829, 0x01,
	0x382A, 0x01,
	0x3920, 0x01,
	0x39A8, 0x00,
	0xB02D, 0x01,
	0x0408, 0x00,
	0x0409, 0x80,
	0x040A, 0x00,
	0x040B, 0x08,
	0x040C, 0x0F,
	0x040D, 0x00,
	0x040E, 0x08,
	0x040F, 0x70,
	0x034C, 0x0F,
	0x034D, 0x00,
	0x034E, 0x08,
	0x034F, 0x70,
	0x0301, 0x05,
	0x0303, 0x02,
	0x0305, 0x04,
	0x0306, 0x01,
	0x0307, 0x68,
	0x030B, 0x01,
	0x030D, 0x04,
	0x030E, 0x01,
	0x030F, 0x8F,
	0x3289, 0x00,
	0x32D5, 0x00,
	0x32D6, 0x00,
	0x0202, 0x10,
	0x0203, 0x3C,
	0x0224, 0x01,
	0x0225, 0xF4,
	0x3116, 0x01,
	0x3117, 0xF4,
	0x0204, 0x00,
	0x0205, 0x00,
	0x0216, 0x00,
	0x0217, 0x00,
	0x0218, 0x01,
	0x0219, 0x00,
	0x020E, 0x01,
	0x020F, 0x00,
	0x3118, 0x00,
	0x3119, 0x00,
	0x311A, 0x01,
	0x311B, 0x00,
	0x0860, 0x00,
	0x0861, 0x00,
	0x0862, 0x00,
	0x0863, 0x00,
	0x309B, 0x01,
	0x0E00, 0x00,
	0x0E01, 0x00,
	0x0E02, 0x00,
	0x0E03, 0x00,
	0x0E10, 0x00,
	0x0E11, 0x00,
	0x0E12, 0x00,
	0x0E13, 0x00,
	0x0E14, 0x00,
	0x0E15, 0x00,
	0x0E16, 0x00,
	0x0E17, 0x00,
	0x0E18, 0x00,
	0x0E19, 0x00,
	0x0E1A, 0x00,
	0x0E1B, 0x00,
	0x0E1C, 0x00,
	0x0E1D, 0x00,
	0x0E1F, 0x00,
	0x0E20, 0x00,
	0x0E21, 0x00,
	0x0E22, 0x00,
	0x0E23, 0x00,
	0x0E24, 0x00,
	0x0E25, 0x00,
	0x0E26, 0x00,
	0x0E28, 0x00,
	0x0E29, 0x00,
	0x0E2A, 0x00,
	0x0E2B, 0x00,
	0x0E2C, 0x00,
	0x0E2D, 0x00,
	0x0E2E, 0x00,
	0x0E2F, 0x00,
	0x0E30, 0x00,
	0x0E31, 0x00,
	0x0E32, 0x00,
	0x0E33, 0x00,
	0x0E34, 0x00,
	0x0E35, 0x00,
	0x0E37, 0x00,
	0x0E38, 0x00,
	0x0E39, 0x00,
	0x0E3A, 0x00,
	0x0E3B, 0x00,
	0x0E3C, 0x00,
	0x0E3D, 0x00,
	0x0E3E, 0x00,
	0x0E40, 0x00,
	0x0E41, 0x00,
	0x0E42, 0x00,
	0x0E43, 0x00,
	0x0E44, 0x00,
	0x0E45, 0x00,
	0x0E46, 0x00,
	0x0E47, 0x00,
	0x0E48, 0x00,
	0x0E49, 0x00,
	0x0E4A, 0x00,
	0x0E4B, 0x00,
	0x0E4C, 0x00,
	0x0E4D, 0x00,
	0x0E4F, 0x00,
	0x0E50, 0x00,
	0x0E51, 0x00,
	0x0E52, 0x00,
	0x0E53, 0x00,
	0x0E54, 0x00,
	0x0E55, 0x00,
	0x0E56, 0x00,
	0x3342, 0x00,
	0x3343, 0x00,
	0x334B, 0x00,
	0x0808, 0x02,
	0x084E, 0x00,
	0x084F, 0x17, //T3-pre
	0x0850, 0x00,
	0x0851, 0x11,
	0x0852, 0x00,
	0x0853, 0x23,
	0x0854, 0x00,
	0x0855, 0x29,
	0x0858, 0x00,
	0x0859, 0x1D, //T3-post
};

static kal_uint16 daumierimx707_Image_quality_setting[] = {
	0x32D9, 0x01,
	0x975C, 0x03,
	0x9850, 0x50,
	0x9851, 0x3C,
	0x9852, 0x28,
	0x9987, 0x0F,
	0x9988, 0x0F,
	0x9989, 0x0F,
	0x998A, 0x0F,
	0x998B, 0x0F,
	0x9A48, 0x04,
	0xA2B4, 0x03,
	0xA2B5, 0x00,
	0xA2B6, 0x02,
	0xA2B7, 0xC0,
	0xA664, 0x00,
	0xA665, 0x70,
	0xA66A, 0x00,
	0xA66B, 0x70,
	0xA670, 0x00,
	0xA671, 0x70,
	0xA74A, 0x00,
	0xA74B, 0x1D,
	0xA74C, 0x00,
	0xA74D, 0x1D,
	0xA754, 0x00,
	0xA755, 0x33,
	0xA756, 0x00,
	0xA757, 0x33,
	0xA758, 0x00,
	0xA759, 0x33,
	0xA75C, 0x00,
	0xA75D, 0x1D,
	0xA75E, 0x00,
	0xA75F, 0x1D,
	0xA766, 0x00,
	0xA767, 0x36,
	0xA768, 0x00,
	0xA769, 0x36,
	0xA76A, 0x00,
	0xA76B, 0x36,
	0xA77A, 0x00,
	0xA77B, 0x24,
	0xA77C, 0x00,
	0xA77D, 0x24,
	0xA784, 0x00,
	0xA785, 0x33,
	0xA786, 0x00,
	0xA787, 0x33,
	0xA788, 0x00,
	0xA789, 0x33,
	0xA78C, 0x00,
	0xA78D, 0x24,
	0xA78E, 0x00,
	0xA78F, 0x24,
	0xA796, 0x00,
	0xA797, 0x36,
	0xA798, 0x00,
	0xA799, 0x36,
	0xA79A, 0x00,
	0xA79B, 0x36,
	0xAA05, 0x05,
	0xAA09, 0x10,
	0xAA0A, 0x10,
	0xAA0B, 0x10,
	0xAA11, 0x05,
	0xAA15, 0x10,
	0xAA16, 0x10,
	0xAA17, 0x10,
	0xAA1D, 0x05,
	0xAA29, 0x05,
	0xB013, 0x00,
	0xEF4B, 0xC0,
	0xEF4C, 0xC0,
	0xEF4D, 0xC0,
	0xEF4E, 0xC0,
	0xEF4F, 0xC0,
	0xEF50, 0xC0,
	0xEF51, 0xC0,
	0xEF52, 0xC0,
	0xEF53, 0xC0,
	0xEF54, 0xC0,
	0xEF55, 0xC0,
	0xEF56, 0xC0,
	0xEF57, 0xC0,
	0xEF58, 0xC0,
	0xEF59, 0xC0,
	0xF27A, 0xC0,
	0xF27D, 0xC0,
	0xF280, 0xC0,
	0xF283, 0xC0,
	0xF286, 0xC0,
	0xF2A5, 0xC0,
	0xF2A6, 0xC0,
	0xF2A7, 0xC0,
	0xF2A8, 0xC0,
	0xF2A9, 0xC0,
	0xF2AA, 0xC0,
	0xF2AB, 0xC0,
	0xF2AC, 0xC0,
	0xF2AD, 0xC0,
	0xF2AE, 0xC0,
	0xF2AF, 0xC0,
	0xF2B0, 0xC0,
	0xF2B1, 0xC0,
	0xF2B2, 0xC0,
	0xF2B3, 0xC0,
	0xF35C, 0x01,
	0xF503, 0x14,
	0xF504, 0x14,
	0xF505, 0x14,
	0xF506, 0x14,
	0xF507, 0x14,
	0xF508, 0x14,
	0xF509, 0x14,
	0xF50A, 0x14,
	0xF50B, 0x14,
	0xF50C, 0x14,
	0xF50D, 0x14,
	0xF50E, 0x14,
	0xF512, 0x28,
	0xF513, 0x28,
	0xF514, 0x28,
	0xF515, 0x28,
	0xF516, 0x28,
	0xF517, 0x28,
	0xF518, 0x28,
	0xF519, 0x28,
	0xF51A, 0x28,
	0xF51B, 0x28,
	0xF51C, 0x28,
	0xF51D, 0x28,
	0xF521, 0x14,
	0xF522, 0x14,
	0xF523, 0x14,
	0xF524, 0x14,
	0xF525, 0x14,
	0xF526, 0x14,
	0xF527, 0x14,
	0xF528, 0x14,
	0xF529, 0x14,
	0xF52A, 0x14,
	0xF52B, 0x14,
	0xF52C, 0x14,
	0xF532, 0x05,
	0xF535, 0x05,
	0xF538, 0x05,
	0xF53B, 0x05,
	0xF53F, 0x14,
	0xF540, 0x14,
	0xF541, 0x14,
	0xF542, 0x14,
	0xF543, 0x14,
	0xF544, 0x14,
	0xF545, 0x14,
	0xF546, 0x14,
	0xF547, 0x14,
	0xF548, 0x14,
	0xF549, 0x14,
	0xF54A, 0x14,
	0xF54E, 0x28,
	0xF54F, 0x28,
	0xF550, 0x28,
	0xF551, 0x28,
	0xF552, 0x28,
	0xF553, 0x28,
	0xF554, 0x28,
	0xF555, 0x28,
	0xF556, 0x28,
	0xF557, 0x28,
	0xF558, 0x28,
	0xF559, 0x28,
};

enum IMGSENSOR_MODE {
	IMGSENSOR_MODE_PREVIEW,
	IMGSENSOR_MODE_CAPTURE,
	IMGSENSOR_MODE_VIDEO,
	IMGSENSOR_MODE_HIGH_SPEED_VIDEO,
	IMGSENSOR_MODE_SLIM_VIDEO,
	IMGSENSOR_MODE_CUSTOM1,
	IMGSENSOR_MODE_CUSTOM2,
	IMGSENSOR_MODE_CUSTOM3,
	IMGSENSOR_MODE_CUSTOM4,
	IMGSENSOR_MODE_CUSTOM5,
	IMGSENSOR_MODE_CUSTOM6,
	IMGSENSOR_MODE_CUSTOM7,
	IMGSENSOR_MODE_CUSTOM8,
	IMGSENSOR_MODE_CUSTOM9,
	IMGSENSOR_MODE_CUSTOM10,
	IMGSENSOR_MODE_CUSTOM11,
	IMGSENSOR_MODE_CUSTOM12,
	IMGSENSOR_MODE_CUSTOM13,
	IMGSENSOR_MODE_CUSTOM14,
	IMGSENSOR_MODE_CUSTOM15,
	IMGSENSOR_MODE_INIT = 0xff,
};

enum {
	OTP_QSC_NONE = 0x0,
	OTP_QSC_INTERNAL,
	OTP_QSC_CUSTOM,
};

struct imgsensor_mode_struct {
	kal_uint32 pclk; /* record different mode's pclk */
	kal_uint32 linelength; /* record different mode's linelength */
	kal_uint32 framelength; /* record different mode's framelength */

	kal_uint8 startx; /* record different mode's startx of grabwindow */
	kal_uint8 starty; /* record different mode's startx of grabwindow */

	kal_uint16 grabwindow_width;
	kal_uint16 grabwindow_height;

/* for MIPIDataLowPwr2HighSpeedSettleDelayCount by different scenario*/
	kal_uint8 mipi_data_lp2hs_settle_dc;

 /*     following for GetDefaultFramerateByScenario()    */
	kal_uint16 max_framerate;
	kal_uint32 mipi_pixel_rate;
};

/* SENSOR PRIVATE STRUCT FOR VARIABLES*/
struct imgsensor_struct {
	kal_uint8 mirror; /* mirrorflip information */

	kal_uint8 sensor_mode; /* record IMGSENSOR_MODE enum value */

	kal_uint32 shutter; /* current shutter */
	kal_uint16 gain; /* current gain */

	kal_uint32 pclk; /* current pclk */

	kal_uint32 frame_length; /* current framelength */
	kal_uint32 line_length; /* current linelength */

	kal_uint32 min_frame_length;
	kal_uint16 dummy_pixel; /* current dummypixel */
	kal_uint16 dummy_line; /* current dummline */

	kal_uint16 current_fps; /* current max fps */
	kal_bool autoflicker_en; /* record autoflicker enable or disable */
	kal_bool test_pattern; /* record test pattern mode or not */
	enum MSDK_SCENARIO_ID_ENUM current_scenario_id;
	kal_bool ihdr_en; /* ihdr enable or disable */
	kal_uint8 ihdr_mode; /* ihdr enable or disable */
	kal_uint8 pdaf_mode; /* ihdr enable or disable */
	kal_uint8 i2c_write_id; /* record current sensor's i2c write id */
};

/* SENSOR PRIVATE STRUCT FOR CONSTANT*/
struct imgsensor_info_struct {
	kal_uint32 sensor_id; /* record sensor id defined in Kd_imgsensor.h */
	kal_uint32 checksum_value; /* checksum value for Camera Auto Test */
	struct imgsensor_mode_struct pre;
	struct imgsensor_mode_struct cap;
	struct imgsensor_mode_struct normal_video;
	struct imgsensor_mode_struct hs_video;
	struct imgsensor_mode_struct slim_video;
	struct imgsensor_mode_struct custom1;
	struct imgsensor_mode_struct custom2;
	struct imgsensor_mode_struct custom3;
	struct imgsensor_mode_struct custom4;
	struct imgsensor_mode_struct custom5;
	struct imgsensor_mode_struct custom6;
	struct imgsensor_mode_struct custom7;
	struct imgsensor_mode_struct custom8;
	struct imgsensor_mode_struct custom9;
	struct imgsensor_mode_struct custom10;
	struct imgsensor_mode_struct custom11;
	struct imgsensor_mode_struct custom12;
	struct imgsensor_mode_struct custom13;
	struct imgsensor_mode_struct custom14;
	struct imgsensor_mode_struct custom15;

	kal_uint8 ae_shut_delay_frame; /* shutter delay frame for AE cycle */
	kal_uint8 ae_sensor_gain_delay_frame;
	kal_uint8 ae_ispGain_delay_frame;
	kal_uint8 ihdr_support; /* 1, support; 0,not support */
	kal_uint8 ihdr_le_firstline; /* 1,le first ; 0, se first */
	kal_uint8 temperature_support;	/* 1, support; 0,not support */
	kal_uint8 sensor_mode_num; /* support sensor mode num */

	kal_uint8 cap_delay_frame; /* enter capture delay frame num */
	kal_uint8 pre_delay_frame; /* enter preview delay frame num */
	kal_uint8 video_delay_frame; /* enter video delay frame num */
	kal_uint8 hs_video_delay_frame;
	kal_uint8 slim_video_delay_frame; /* enter slim video delay frame num */
	kal_uint8 custom1_delay_frame; /* enter custom1 delay frame num */
	kal_uint8 custom2_delay_frame; /* enter custom2 delay frame num */
	kal_uint8 custom3_delay_frame; /* enter custom3 delay frame num */
	kal_uint8 custom4_delay_frame; /* enter custom4 delay frame num */
	kal_uint8 custom5_delay_frame; /* enter custom5 delay frame num */
	kal_uint8 custom6_delay_frame; /* enter custom6 delay frame num */
	kal_uint8 custom7_delay_frame; /* enter custom7 delay frame num */
	kal_uint8 custom8_delay_frame; /* enter custom8 delay frame num */
	kal_uint8 custom9_delay_frame; /* enter custom9 delay frame num */
	kal_uint8 custom10_delay_frame; /* enter custom10 delay frame num */
	kal_uint8 custom11_delay_frame; /* enter custom11 delay frame num */
	kal_uint8 custom12_delay_frame; /* enter custom12 delay frame num */
	kal_uint8 custom13_delay_frame; /* enter custom13 delay frame num */
	kal_uint8 custom14_delay_frame; /* enter custom14 delay frame num */
	kal_uint8 custom15_delay_frame; /* enter custom15 delay frame num */

	kal_uint8  frame_time_delay_frame;
	kal_uint8 margin; /* sensor framelength & shutter margin */
	kal_uint32 min_shutter; /* min shutter */
	kal_uint32 max_frame_length;
	kal_uint32 min_gain;
	kal_uint32 max_gain;
	kal_uint32 min_gain_iso;
	kal_uint32 gain_step;
	kal_uint32 exp_step;
	kal_uint32 gain_type;
	kal_uint8 isp_driving_current; /* mclk driving current */
	kal_uint8 sensor_interface_type; /* sensor_interface_type */
	kal_uint8 mipi_sensor_type;
	/* 0,MIPI_OPHY_NCSI2; 1,MIPI_OPHY_CSI2, default is NCSI2,
	 * don't modify this para
	 */
	kal_uint8 mipi_settle_delay_mode;
	/* 0, high speed signal auto detect;
	 * 1, use settle delay,unit is ns,
	 * default is auto detect, don't modify this para
	 */
	kal_uint8 sensor_output_dataformat;
	kal_uint8 mclk;	 /* mclk value, suggest 24 or 26 for 24Mhz or 26Mhz */
	kal_uint32 i2c_speed; /* i2c speed */
	kal_uint8 mipi_lane_num; /* mipi lane num */
	kal_uint8 i2c_addr_table[5];
};

struct SEAMLESS_SYS_DELAY {
	uint32_t source_scenario;
	uint32_t target_scenario;
	uint32_t sys_delay;
};

/* SENSOR READ/WRITE ID */
/* #define IMGSENSOR_WRITE_ID_1 (0x6c) */
/* #define IMGSENSOR_READ_ID_1  (0x6d) */
/* #define IMGSENSOR_WRITE_ID_2 (0x20) */
/* #define IMGSENSOR_READ_ID_2  (0x21) */

extern int iReadRegI2C(u8 *a_pSendData, u16 a_sizeSendData,
	u8 *a_pRecvData, u16 a_sizeRecvData,
		       u16 i2cId);
extern int iWriteRegI2C(u8 *a_pSendData, u16 a_sizeSendData, u16 i2cId);

extern void read_imx230_eeprom(void);
int iBurstWriteReg_multi(u8 *pData, u32 bytes, u16 i2cId,
	u16 transfer_length, u16 timing);

extern int iReadReg(u16 a_u2Addr, u8 *a_puBuff, u16 i2cId);
extern int iWriteReg(u16 a_u2Addr, u32 a_u4Data, u32 a_u4Bytes, u16 i2cId);
extern void kdSetI2CSpeed(u16 i2cSpeed);
extern int iBurstWriteReg_multi(u8 *pData, u32 bytes, u16 i2cId,
				u16 transfer_length, u16 timing);
#endif
